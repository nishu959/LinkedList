class Node:

    def __init__(self, val):
        self.val = val 
        self.next = None

   
class SLL():

    def __init__(self, value):
        node = Node(value)
        self.head = node
        self.tail = node 
        self.length = 1
        
    def prepend(self, value):  # O(1)
        new_node = Node(value)    
        new_node.next = self.head
        self.head = new_node 
        if self.length == 0:
            self.tail = new_node    
        self.length += 1
        return True
    
    def print_ll(self):  # O(n)
        t = self.head 
        while t != None:
            print(t.val, end=" ")
            t = t.next
        print()
            
    def append(self, value):  # O(n)
        temp = Node(value)
        if self.head == None:
            self.head = temp
            self.tail = temp 
        else:
            self.tail.next = temp 
            self.tail = temp
    
        self.length += 1
        return True
    
    def pop(self):  # O(n)
        if self.length == 0:
            print("list is already empty can't delete")
            return None
        temp = self.head
        pre = self.head  
        while temp.next != None:
            pre = temp 
            temp = temp.next  
        
        pre.next = None
        self.tail = pre
        self.length -= 1 
        if self.length == 0:
            self.head = None 
            self.tail = None 
    
        return temp
    
    def pop_first(self):  # O(1)
        if self.length == 0:
            print("list is already empty can't delete")
            return None
        temp = self.head 
        self.head = self.head.next
        temp.next = None
        self.length -= 1 
        if self.length == 0:
            self.tail = None 
            
        return temp
    
    def get(self, index):  # O(n)
        if index >= self.length or index < 0:
            return None
        temp = self.head
        for _ in range(index):
            temp = temp.next    
        return temp
    
    def set(self, index, value):  # O(n)
        temp = self.get(index)
        if temp:
            temp.val = value 
            return True 
        return False
    
    def insert(self, index, value):  # O(n)
        if index > self.length or index < 0:
            return False
        if index == 0:
            return self.prepend(value)
        if index == self.length:
            return self.append(value)
        
        new_node = Node(value)
        temp = self.get(index - 1)
        new_node.next = temp.next
        temp.next = new_node 
        self.length += 1
        return True  
    
    def remove(self, index):  # O(n)
        if index < 0 or index >= self.length:
            return None 
        if index == 0:
            return self.pop_first()
            
        if index == self.length - 1:
            return self.pop()
        
        prev = self.get(index - 1)
        temp = prev.next 
        prev.next = temp.next
        temp.next = None 
        return temp 
    
    def reverse(self):  # O(n)
        temp = self.head 
        self.head = self.tail 
        self.tail = temp 
        after = temp.next  
        before = None
        for _ in range(self.length):
            after = temp.next 
            temp.next = before 
            before = temp 
            temp = after 
    
    
l_list = SLL(1)
